--html--

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        #canvas{
            border: 10px solid;
            border-color: black;
        }
    </style>
</head>
<body>
    <iframe width="560" height="315" src="https://www.youtube.com/embed/8SbUC-UaAxE?si=9wi97w20VqQPYzR8"></iframe>
    <iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d45405.19277249376!2d20.9438941!3d44.6619362!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e0!3m2!1sen!2srs!4v1740647791283!5m2!1sen!2srs" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
    <audio controls><source src="pesma.mp3" type="pesma/mp3"></audio>
    <video width="1024" height="576" controls><source src="video.mp4" type="viede/mp4"></video>

    <canvas id="canvas" width="600" height="400"></canvas>
    <div>
        <button class="save">Save</button>
        <button class="clear">clear</button>
        <span>Color: <input type="color" value="#ffff00" id="penColor"></span>
        <span>Width: <input type="range" min="1" max="20" value="10" id="penWidth"> </span>
    </div>
    <div class="output"></div>
    <script src="index.js"></script>
</body>
</html>

--js--

const canvas = document.querySelector('#canvas');
const ctx = canvas.getContext('2d');

const penColor = document.querySelector('#penColor');
const penWidth = document.querySelector('#penWidth');
const btnSave = document.querySelector('.save');
const btnClear = document.querySelector('.clear');
const output = document.querySelector('.output');

const mUSCLIK = {
    draw : false,
    x:0,
    y:0,
    lastX:0,
    lastY:0
};

canvas.style.border = '1px solid balck';

btnSave.addEventListener('click', saveImg);
btnClear.addEventListener('click', clearImg);

canvas.addEventListener('mousemove',(e)=>{
    mUSCLIK.lastX = mUSCLIK.x;
    mUSCLIK.lastY = mUSCLIK.y;
    mUSCLIK.x = e.clientX;
    mUSCLIK.y = e.clientY;
    draw();
});

canvas.addEventListener('mousedown', (e)=>{
    mUSCLIK.draw = true;
});

canvas.addEventListener('mouseup', (e) =>{
    mUSCLIK.draw =false;
});

canvas.addEventListener('mouseout', (e) =>{
    mUSCLIK.draw =false;
});

function draw(){
    if(mUSCLIK.draw){
        ctx.beginPath();
        ctx.moveTo(mUSCLIK.lastX, mUSCLIK.lastY);
        ctx.lineTo(mUSCLIK.x,mUSCLIK.y);
        ctx.strokeStyle = penColor.value;
        ctx.lineWidth = penWidth.value;
        ctx.stroke();
        ctx.closePath();
    }
}

function clearImg(){
    let temp = confirm('u sure???');
    if(temp){
        ctx.clearRect(0,0,canvas.width,canvas.height);
    }
}

function saveImg(){
    const dataURL = canvas.toDataURL();
    console.log(dataURL);
    const img = document.createElement('img');
    output.prepend(img);
    img.setAttribute('src', dataURL);
    const link = document.createElement('a');
    output.append(link);
    let fileName = Math.random().toString(16).substring(-8) +'.png';
    link.setAttribute('download', fileName);
    link.href = dataURL;
    link.click();
    output.removeChild(link);
}
